#pragma once

namespace std {

template <typename T> struct remove_reference      { using type = T; };
template <typename T> struct remove_reference<T&>  { using type = T; };
template <typename T> struct remove_reference<T&&> { using type = T; };
template <typename T>
using remove_reference_t = typename remove_reference<T>::type;

template <typename T> struct add_lvalue_reference { using type = T&; };
template <typename T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

template <typename T> struct add_rvalue_reference { using type = T&&; };
template <typename T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

template <bool, typename T = void> struct enable_if { };
template <typename T> struct enable_if<true, T>     { using type = T; };

template <bool B, typename T = void>
using enable_if_t = typename enable_if<B, T>::type;

} // namespace std
