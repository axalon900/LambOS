//
// Created by Martin Miralles-Cordal on 10/24/19.
//

#pragma once

#include <type_traits>

namespace std {

template <typename T, typename U> concept __weakly_same = is_same_v<T, U>;
template <typename T, typename U> concept same_as = __weakly_same<T, U> && __weakly_same<U, T>;

template <typename T> concept swappable = is_swappable_v<T>;
template <typename A, typename B> concept swappable_with = is_swappable_with_v<A, B>;
template <class From, class To>
concept convertible_to = is_convertible_v<From, To>
                      && requires(add_rvalue_reference_t<From> (&f)()) { static_cast<To>(f()); };

template<typename Derived, typename Base>
concept derived_from = is_base_of_v<Base, Derived> && is_convertible_v<Derived const volatile *, Base const volatile *>;

template <typename T, typename...Args> concept constructible = is_constructible<T, Args...>::value;
template <typename T, typename U> concept assignable = is_assignable<T, U>::value;
template <typename T> concept default_constructible = is_default_constructible_v<T>;
template <typename T> concept copy_constructible = is_copy_constructible_v<T>;
template <typename T> concept move_constructible = is_move_constructible_v<T>;

template <typename T> concept copy_assignable = is_copy_assignable_v<T>;
template <typename T> concept move_assignable = is_move_assignable_v<T>;

template <typename T> concept destructible = std::is_destructible_v<T>;

//template <typename T, typename...Args> concept TriviallyConstructible = std::is_trivially_constructible_v<T, Args...>;
//template <typename T, typename U> concept TriviallyAssignable = std::is_trivially_assignable_v<T, U>;
//template <typename T> concept TriviallyDefaultConstructible = std::is_trivially_default_constructible_v<T>;
//template <typename T> concept TriviallyCopyConstructible = std::is_trivially_copy_constructible_v<T>;
//template <typename T> concept TriviallyCopyAssignable = std::is_trivially_copy_assignable_v<T>;
//template <typename T> concept TriviallyCopyable = std::is_trivially_copyable_v<T>;
//template <typename T> concept TriviallyMoveConstructible = std::is_trivially_move_constructible_v<T>;
//template <typename T> concept TriviallyMoveAssignable = std::is_trivially_move_assignable_v<T>;
template <typename T> concept trivially_destructible = std::is_trivially_destructible_v<T>;

template <typename T, typename...Args> concept nothrow_constructible = std::is_nothrow_constructible_v<T, Args...>;
template <typename T, typename U> concept nothrow_assignable = std::is_nothrow_assignable_v<T, U>;
template <typename T> concept nothrow_default_constructible = std::is_nothrow_default_constructible_v<T>;
template <typename T> concept nothrow_copy_constructible = std::is_nothrow_copy_constructible_v<T>;
template <typename T> concept nothrow_copy_assignable = std::is_nothrow_copy_assignable_v<T>;
template <typename T> concept nothrow_move_constructible = std::is_nothrow_move_constructible_v<T>;
template <typename T> concept nothrow_move_assignable = std::is_nothrow_move_assignable_v<T>;
template <typename T> concept nothrow_destructible = std::is_nothrow_destructible_v<T>;

template <typename T, typename U>
concept common_reference_with = same_as<common_reference_t<T, U>, common_reference_t<U, T>>
                                && convertible_to<T, common_reference_t<T, U>>
                                && convertible_to<U, common_reference_t<T, U>>;

//template<typename L, typename R>
//concept assignable_from = is_assignable_v<L, R>;
template<typename L, typename R>
concept assignable_from = is_lvalue_reference_v<L>
                          && common_reference_with<const remove_reference_t<L>&, const remove_reference_t<R>&>
                          && requires(L lhs, R&& rhs) { { lhs = forward<R>(rhs) } -> same_as<L>; };

template <typename T> concept movable = is_object_v<T> && move_constructible<T> && assignable_from<T&, T> && swappable<T>;
template <typename T> concept copyable = copy_constructible<T> && movable<T> && assignable_from<T&, const T&>;
template <typename T> concept semiregular = copyable<T> && default_constructible<T>;

template <typename T> concept integral = is_integral<T>::value;
template <typename T> concept signed_integral = integral<T> && is_signed<T>::value;
template <typename T> concept unsigned_integral = integral<T> && !signed_integral<T>;

template<typename B>
concept boolean = same_as<B, bool> || (movable<remove_cvref_t<B>> &&
        requires(const remove_reference_t<B>& b1, const remove_reference_t<B>& b2, const bool a) {
            { b1 } -> convertible_to<bool>;
            { !b1 } -> convertible_to<bool>;
            { b1 && b2 } -> same_as<bool>;
            { b1 && a } -> same_as<bool>;
            { a && b2 } -> same_as<bool>;
            { b1 || b2 } -> same_as<bool>;
            { b1 || a } -> same_as<bool>;
            { a || b2 } -> same_as<bool>;
            { b1 == b2 } -> convertible_to<bool>;
            { b1 == a } -> convertible_to<bool>;
            { a == b2 } -> convertible_to<bool>;
            { b1 != b2 } -> convertible_to<bool>;
            { b1 != a } -> convertible_to<bool>;
            { a != b2 } -> convertible_to<bool>;
        });

template<typename T, typename U>
concept __weakly_equality_comparable_with = requires(const remove_reference_t<T>& t, const remove_reference_t<U>& u)
{
    { t == u } -> boolean;
    { t != u } -> boolean;
    { u == t } -> boolean;
    { u != t } -> boolean;
};

template <typename T>
concept equality_comparable = __weakly_equality_comparable_with<T, T>;

template <typename T, typename U>
concept equality_comparable_with = equality_comparable<T> && equality_comparable<U>
        && common_reference_with<const remove_reference_t<T>&, const remove_reference_t<U>&>
        && equality_comparable<common_reference_t<const remove_reference_t<T>&, const remove_reference_t<U>&>>
        && __weakly_equality_comparable_with<T, U>;

template <typename T> concept regular = semiregular<T> && equality_comparable<T>;

} // namespace std
