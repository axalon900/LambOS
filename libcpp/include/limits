//
// Created by Martin Miralles-Cordal on 10/21/19.
//

#pragma once

#include <bits/limits.hpp>

namespace std {

enum float_round_style {
    round_indeterminate         = -1,
    round_toward_zero           =  0,
    round_to_nearest            =  1,
    round_toward_infinity       =  2,
    round_toward_neg_infinity   =  3,
};

enum float_denorm_style {
    denorm_indeterminate = -1,
    denorm_absent        =  0,
    denorm_present       =  1
};

template<typename T> struct numeric_limits
{
    static constexpr bool is_specialized = false;

    static constexpr T min() noexcept { return T(); }
    static constexpr T max() noexcept { return T(); }
    static constexpr T lowest() noexcept { return T(); }

    static constexpr int digits = 0;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;

    static constexpr bool is_signed = false;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 0;
    static constexpr T epsilon() noexcept { return T(); }
    static constexpr T round_error() noexcept { return T(); }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr T infinity() noexcept { return T(); }
    static constexpr T quiet_NaN() noexcept { return T(); }
    static constexpr T signaling_NaN() noexcept { return T(); }
    static constexpr T denorm_min() noexcept { return T(); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = false;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;

};

template<> struct numeric_limits<bool>
{
    static constexpr bool is_specialized = true;

    static constexpr bool min() noexcept { return false; }
    static constexpr bool max() noexcept { return true; }
    static constexpr bool lowest() noexcept { return false; }

    static constexpr int digits = 1;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;

    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr bool epsilon() noexcept { return false; }
    static constexpr bool round_error() noexcept { return false; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr bool infinity() noexcept { return false; }
    static constexpr bool quiet_NaN() noexcept { return false; }
    static constexpr bool signaling_NaN() noexcept { return false; }
    static constexpr bool denorm_min() noexcept { return false; }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<char>
{
    static constexpr bool is_specialized = true;

    static constexpr char min() noexcept { return CHAR_MIN; }
    static constexpr char max() noexcept { return CHAR_MAX; }
    static constexpr char lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(char);
    static constexpr int digits10 = _LIBCPP_DIGITS10(char);
    static constexpr int max_digits10 = 0;

    static constexpr bool is_signed = char(-1) < char(0);
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr char epsilon() noexcept { return 0; }
    static constexpr charround_error() noexcept { return 0; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr char infinity() noexcept { return char(); }
    static constexpr char quiet_NaN() noexcept { return char(); }
    static constexpr char signaling_NaN() noexcept { return char(); }
    static constexpr char denorm_min() noexcept { return static_cast<char>(0); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = !is_signed;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<signed char>;
template<> struct numeric_limits<unsigned char>;
template<> struct numeric_limits<char8_t>;
template<> struct numeric_limits<char16_t>;
template<> struct numeric_limits<char32_t>;
template<> struct numeric_limits<wchar_t>;

template<> struct numeric_limits<short>
{
    static constexpr bool is_specialized = true;

    static constexpr short min() noexcept { return SHRT_MIN; }
    static constexpr short max() noexcept { return SHRT_MAX; }
    static constexpr short lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(short);
    static constexpr int digits10 = _LIBCPP_DIGITS10(short);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr short epsilon() noexcept { return 0; }
    static constexpr short round_error() noexcept { return 0; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr short infinity() noexcept { return short(); }
    static constexpr short quiet_NaN() noexcept { return short(); }
    static constexpr short signaling_NaN() noexcept { return short(); }
    static constexpr short denorm_min() noexcept { return short(); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<int>
{
    static constexpr bool is_specialized = true;

    static constexpr int min() noexcept { return INT_MIN; }
    static constexpr int max() noexcept { return INT_MAX; }
    static constexpr int lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(int);
    static constexpr int digits10 = _LIBCPP_DIGITS10(int);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr int epsilon() noexcept { return 0; }
    static constexpr int round_error() noexcept { return 0; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr int infinity() noexcept { return static_cast<int>(0); }
    static constexpr int quiet_NaN() noexcept { return static_cast<int>(0); }
    static constexpr int signaling_NaN() noexcept { return static_cast<int>(0); }
    static constexpr int denorm_min() noexcept { return static_cast<int>(0); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<long>
{
    static constexpr bool is_specialized = true;

    static constexpr long min() noexcept { return LONG_MIN; }
    static constexpr long max() noexcept { return LONG_MAX; }
    static constexpr long lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(long);
    static constexpr int digits10 = _LIBCPP_DIGITS10(long);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr long epsilon() noexcept { return 0; }
    static constexpr long round_error() noexcept { return 0; }
    
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr long infinity() noexcept { return static_cast<long>(0); }
    static constexpr long quiet_NaN() noexcept { return static_cast<long>(0); }
    static constexpr long signaling_NaN() noexcept { return static_cast<long>(0); }
    static constexpr long denorm_min() noexcept { return static_cast<long>(0); }
    
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<long long>
{
    static constexpr bool is_specialized = true;

    static constexpr long long min() noexcept { return -LONG_LONG_MAX - 1; }
    static constexpr long long max() noexcept { return LONG_LONG_MAX; }
    static constexpr long long lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(long long);
    static constexpr int digits10 = _LIBCPP_DIGITS10(long long);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr long long epsilon() noexcept { return 0; }
    static constexpr long long round_error() noexcept { return 0; }
    
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr long long infinity() noexcept { return static_cast<long long>(0); }
    static constexpr long long quiet_NaN() noexcept { return static_cast<long long>(0); }
    static constexpr long long signaling_NaN() noexcept { return static_cast<long long>(0); }
    static constexpr long long denorm_min() noexcept { return static_cast<long long>(0); }
    
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<unsigned short>
{
    static constexpr bool is_specialized = true;

    static constexpr unsigned short min() noexcept { return 0; }
    static constexpr unsigned short max() noexcept { return USHRT_MAX; }
    static constexpr unsigned short lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(unsigned short);
    static constexpr int digits10 = _LIBCPP_DIGITS10(unsigned short);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned short epsilon() noexcept { return 0; }
    static constexpr unsigned short round_error() noexcept { return 0; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned short infinity() noexcept { return static_cast<unsigned short>(0); }
    static constexpr unsigned short quiet_NaN() noexcept { return static_cast<unsigned short>(0); }
    static constexpr unsigned short signaling_NaN() noexcept { return static_cast<unsigned short>(0); }
    static constexpr unsigned short denorm_min() noexcept { return static_cast<unsigned short>(0); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<unsigned int>
{
    static constexpr bool is_specialized = true;

    static constexpr unsigned int min() noexcept { return 0; }
    static constexpr unsigned int max() noexcept { return UINT_MAX; }
    static constexpr unsigned int lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(unsigned int);
    static constexpr int digits10 = _LIBCPP_DIGITS10(unsigned int);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned int epsilon() noexcept { return 0; }
    static constexpr unsigned int round_error() noexcept { return 0; }
    
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned int infinity() noexcept { return static_cast<unsigned int>(0); }
    static constexpr unsigned int quiet_NaN() noexcept { return static_cast<unsigned int>(0); }
    static constexpr unsigned int signaling_NaN() noexcept { return static_cast<unsigned int>(0); }
    static constexpr unsigned int denorm_min() noexcept { return static_cast<unsigned int>(0); }
    
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<unsigned long>
{
    static constexpr bool is_specialized = true;

    static constexpr unsigned long min() noexcept { return 0; }
    static constexpr unsigned long max() noexcept { return ULONG_MAX; }
    static constexpr unsigned long lowest() noexcept { return min(); }

    static constexpr int digits = _LIBCPP_DIGITS(unsigned long);
    static constexpr int digits10 = _LIBCPP_DIGITS10(unsigned long);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned long epsilon() noexcept { return 0; }
    static constexpr unsigned long round_error() noexcept { return 0; }
    
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned long infinity() noexcept { return static_cast<unsigned long>(0); }
    static constexpr unsigned long quiet_NaN() noexcept { return static_cast<unsigned long>(0); }
    static constexpr unsigned long signaling_NaN() noexcept { return static_cast<unsigned long>(0); }
    static constexpr unsigned long denorm_min() noexcept { return static_cast<unsigned long>(0); }
    
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

template<> struct numeric_limits<unsigned long long>
{
    static constexpr bool is_specialized = true;

    static constexpr unsigned long long min() noexcept { return 0; }
    static constexpr unsigned long long max() noexcept { return ULONG_LONG_MAX; }
    static constexpr unsigned long long lowest() noexcept { return min(); }
    
    static constexpr int digits = _LIBCPP_DIGITS(unsigned long long);
    static constexpr int digits10 = _LIBCPP_DIGITS10(unsigned long long);
    static constexpr int max_digits10 = 0;
    
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned long long epsilon() noexcept { return 0; }
    static constexpr unsigned long long round_error() noexcept { return 0; }
    
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned long long infinity() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr unsigned long long quiet_NaN() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr unsigned long long signaling_NaN() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr unsigned long long denorm_min() noexcept { return static_cast<unsigned long long>(0); }
    
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
};

/// numeric_limits<float> specialization.
template<> struct numeric_limits<float>
{
    static constexpr bool is_specialized = true;

    static constexpr float min() noexcept { return FLT_MIN; }
    static constexpr float max() noexcept { return FLT_MAX; }
    static constexpr float lowest() noexcept { return -FLT_MAX; }

    static constexpr int digits = FLT_MANT_DIG;
    static constexpr int digits10 = FLT_DIG;
    static constexpr int max_digits10 = FLT_DECIMAL_DIG;

    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = FLT_RADIX;

    static constexpr float epsilon() noexcept { return FLT_EPSILON; }
    static constexpr float round_error() noexcept { return 0.5F; }
    static constexpr int min_exponent = FLT_MIN_EXP;
    static constexpr int min_exponent10 = FLT_MIN_10_EXP;
    static constexpr int max_exponent = FLT_MAX_EXP;
    static constexpr int max_exponent10 = FLT_MAX_10_EXP;

    static constexpr bool has_infinity = __FLT_HAS_INFINITY__;
    static constexpr bool has_quiet_NaN = __FLT_HAS_QUIET_NAN__;
    static constexpr bool has_signaling_NaN = has_quiet_NaN;
    static constexpr float_denorm_style has_denorm = bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
    static constexpr bool has_denorm_loss = false;

    static constexpr float infinity() noexcept { return __builtin_huge_valf(); }
    static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); }
    static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); }
    static constexpr float denorm_min() noexcept { return __FLT_DENORM_MIN__; }
    static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_to_nearest;
};

template<> struct numeric_limits<double>
{
    static constexpr bool is_specialized = true;

    static constexpr double min() noexcept { return DBL_MIN; }
    static constexpr double max() noexcept { return DBL_MAX; }
    static constexpr double lowest() noexcept { return -DBL_MAX; }

    static constexpr int digits = DBL_MANT_DIG;
    static constexpr int digits10 = DBL_DIG;
    static constexpr int max_digits10 = DBL_DECIMAL_DIG;

    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = FLT_RADIX;
    static constexpr double epsilon() noexcept { return DBL_EPSILON; }
    static constexpr double round_error() noexcept { return 0.5; }

    static constexpr int min_exponent = DBL_MIN_EXP;
    static constexpr int min_exponent10 = DBL_MIN_10_EXP;
    static constexpr int max_exponent = DBL_MAX_EXP;
    static constexpr int max_exponent10 = DBL_MAX_10_EXP;

    static constexpr bool has_infinity = __DBL_HAS_INFINITY__;
    static constexpr bool has_quiet_NaN = __DBL_HAS_QUIET_NAN__;
    static constexpr bool has_signaling_NaN = has_quiet_NaN;
    static constexpr float_denorm_style has_denorm = bool(__DBL_HAS_DENORM__) ? denorm_present : denorm_absent;
    static constexpr bool has_denorm_loss = false;

    static constexpr double infinity() noexcept { return __builtin_huge_val(); }
    static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); }
    static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); }
    static constexpr double denorm_min() noexcept { return __DBL_DENORM_MIN__; }
    static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_to_nearest;
};

template<> struct numeric_limits<long double>
{
    static constexpr bool is_specialized = true;

    static constexpr long double min() noexcept { return LDBL_MIN; }
    static constexpr long double max() noexcept { return LDBL_MAX; }
    static constexpr long double lowest() noexcept { return -LDBL_MAX; }

    static constexpr int digits = LDBL_MANT_DIG;
    static constexpr int digits10 = LDBL_DIG;
    static constexpr int max_digits10 = LDBL_DECIMAL_DIG;

    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = FLT_RADIX;
    static constexpr long double epsilon() noexcept { return LDBL_EPSILON; }
    static constexpr long double round_error() noexcept { return 0.5L; }

    static constexpr int min_exponent = LDBL_MIN_EXP;
    static constexpr int min_exponent10 = LDBL_MIN_10_EXP;
    static constexpr int max_exponent = LDBL_MAX_EXP;
    static constexpr int max_exponent10 = LDBL_MAX_10_EXP;

    static constexpr bool has_infinity = __LDBL_HAS_INFINITY__;
    static constexpr bool has_quiet_NaN = __LDBL_HAS_QUIET_NAN__;
    static constexpr bool has_signaling_NaN = has_quiet_NaN;
    static constexpr float_denorm_style has_denorm = bool(__LDBL_HAS_DENORM__) ? denorm_present : denorm_absent;
    static constexpr bool has_denorm_loss = false;

    static constexpr long double infinity() noexcept { return __builtin_huge_vall(); }
    static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); }
    static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); }
    static constexpr long double denorm_min() noexcept { return __LDBL_DENORM_MIN__; }
    static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_to_nearest;
};

} // namespace std
