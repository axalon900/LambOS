#pragma once

#include <type_traits>

namespace std {

template <class T>
constexpr remove_reference_t<T> &&move(T&& a) { return static_cast<typename std::remove_reference_t<T>&&>(a); }

template<typename T>
constexpr T && forward(typename std::remove_reference<T>::type & t) noexcept { return static_cast<T &&>(t); }

template<typename T>
constexpr T && forward(typename std::remove_reference<T>::type && t) noexcept { return static_cast<T &&>(t); }

} // namespace std
