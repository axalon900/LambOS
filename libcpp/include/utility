#pragma once

#include <type_traits>
#include <cstdlib>
#include <cstdio>

namespace std {

template <typename T> using __rref_t = remove_reference_t<T>;

template<typename T> inline constexpr T *addressof(T &r) noexcept { return __builtin_addressof(r); }
template<typename T> const T *addressof(const T&&) = delete;

template <typename T> constexpr __rref_t<T> &&move(T&& a) { return static_cast<__rref_t<T>&&>(a); }

template<typename T>
constexpr conditional_t<is_nothrow_move_constructible_v<T> || !is_copy_constructible_v<T>, T &&, T const &>
move_if_noexcept(T& x) noexcept { return std::move(x); }

template<typename T> constexpr T && forward(__rref_t<T> & t) noexcept { return static_cast<T &&>(t); }
template<typename T> constexpr T && forward(__rref_t<T> && t) noexcept { return static_cast<T &&>(t); }

template<typename T>
constexpr void swap(T& a, T& b) noexcept(is_nothrow_move_constructible<T>::value &&
                                         is_nothrow_move_assignable<T>::value)
{
    T tmp = std::move(a);
    a = std::move(b);
    b = std::move(tmp);
}

template<class T2, std::size_t N>
constexpr void swap(T2 (&a)[N], T2 (&b)[N]) noexcept(is_nothrow_swappable<T2>::value)
{
    for (size_t n = 0; n < N; ++n) { swap(a[n], b[n]); }
}

template<typename T, T... _Idx>
struct integer_sequence
{
    typedef T value_type;
    static constexpr size_t size() noexcept { return sizeof...(_Idx); }
};

/// Alias template make_integer_sequence
template<typename T, T I>
using make_integer_sequence = integer_sequence<T, __integer_pack(I)...>;

/// Alias template index_sequence
template<size_t... _Idx> using index_sequence = integer_sequence<size_t, _Idx...>;

/// Alias template make_index_sequence
template<size_t I>
using make_index_sequence = make_integer_sequence<size_t, I>;

/// Alias template index_sequence_for
template<typename... _Types>
using index_sequence_for = make_index_sequence<sizeof...(_Types)>;

} // namespace std
