//
// Created by Martin Miralles-Cordal on 10/6/19.
//

#pragma once

#include <stddef.h>

namespace std {

using ::size_t;
using ::ptrdiff_t;
using ::max_align_t;
using nullptr_t = decltype(nullptr);

enum class byte : unsigned char {};

#define __byte_cast static_cast<unsigned char>

template<typename IntegerType>
constexpr byte operator<<(byte b, IntegerType shift) noexcept { return byte(__byte_cast(b) << shift); }
template<typename IntegerType>
constexpr byte operator>>(byte b, IntegerType shift) noexcept { return byte(__byte_cast(b) >> shift); }
constexpr byte operator|(byte lhs, byte rhs) noexcept { return byte(__byte_cast(lhs) | __byte_cast(rhs)); }
constexpr byte operator&(byte lhs, byte rhs) noexcept { return byte(__byte_cast(lhs) & __byte_cast(rhs)); }
constexpr byte operator^(byte lhs, byte rhs) noexcept { return byte(__byte_cast(lhs) ^ __byte_cast(rhs)); }
constexpr byte operator~(byte b) noexcept { return byte(~__byte_cast(b)); }

template<typename IntegerType>
constexpr byte& operator<<=(byte& b, IntegerType shift) noexcept { return b = byte(__byte_cast(b) << shift); }
template<typename IntegerType>
constexpr byte& operator>>=(byte& b, IntegerType shift) noexcept { return b = byte(__byte_cast(b) >> shift); }
constexpr byte& operator|=(byte& lhs, byte rhs) noexcept { return lhs = byte(__byte_cast(lhs) | __byte_cast(rhs)); }
constexpr byte& operator&=(byte& lhs, byte rhs) noexcept { return lhs = byte(__byte_cast(lhs) & __byte_cast(rhs)); }
constexpr byte& operator^=(byte& lhs, byte rhs) noexcept { return lhs = byte(__byte_cast(lhs) ^ __byte_cast(rhs)); }

template<typename IntegerType>
constexpr IntegerType to_integer(byte b) noexcept { return IntegerType(b); }

#undef __byte_cast
} // namespace std
